'use client';

import { createContext, useState, useContext, useEffect, useMemo } from 'react';

const LanguageContext = createContext();

export const languages = {
  en: { code: 'en', name: 'English', flag: 'ðŸ‡ºðŸ‡¸' },
  pt: { code: 'pt', name: 'PortuguÃªs', flag: 'ðŸ‡§ðŸ‡·' },
  es: { code: 'es', name: 'EspaÃ±ol', flag: 'ðŸ‡ªðŸ‡¸' }
};

export function LanguageProvider({ children }) {
  // Usar 'en' como valor padrÃ£o inicial para evitar renderizaÃ§Ã£o no servidor com valor diferente do cliente
  const [language, setLanguage] = useState('en');
  
  // Efeito para executar apenas no cliente
  useEffect(() => {
    // Envolver em try/catch para evitar erros caso o localStorage nÃ£o esteja disponÃ­vel
    try {
      // Tenta recuperar o idioma das preferÃªncias do usuÃ¡rio no localStorage
      const savedLanguage = localStorage.getItem('language');
      if (savedLanguage && Object.keys(languages).includes(savedLanguage)) {
        setLanguage(savedLanguage);
      } else {
        // Detecta o idioma do navegador como fallback
        const browserLanguage = navigator.language.split('-')[0];
        if (Object.keys(languages).includes(browserLanguage)) {
          setLanguage(browserLanguage);
        }
      }
    } catch (error) {
      console.error('Error accessing localStorage:', error);
    }
  }, []);

  // FunÃ§Ã£o para mudar idioma memoizada
  const changeLanguage = useMemo(() => (lang) => {
    if (Object.keys(languages).includes(lang)) {
      setLanguage(lang);
      try {
        localStorage.setItem('language', lang);
      } catch (error) {
        console.error('Error saving language to localStorage:', error);
      }
    }
  }, []);

  // Memoize o valor do contexto para evitar renderizaÃ§Ãµes desnecessÃ¡rias
  const contextValue = useMemo(() => {
    return { language, changeLanguage };
  }, [language, changeLanguage]);

  return (
    <LanguageContext.Provider value={contextValue}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  // Em vez de lanÃ§ar um erro, retornamos um valor padrÃ£o se estiver fora do Provider
  if (!context) {
    // Somente para log, nÃ£o lanÃ§amos o erro
    console.warn('useLanguage was called outside of the LanguageProvider');
    
    // Retornamos um valor padrÃ£o que nÃ£o interrompe a renderizaÃ§Ã£o
    return {
      language: 'en',
      changeLanguage: () => console.warn('Cannot change language outside of LanguageProvider')
    };
  }
  return context;
}
